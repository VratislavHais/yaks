apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [{
        "apiVersion": "org.citrusframework.yaks/v1alpha1",
        "kind": "Test",
        "metadata": {
          "name": "example"
        },
        "spec": {
          "source": {
            "name":"example.feature",
            "content": "Feature: hello world\n  Scenario: print slogan\n    Given YAKS does Cloud-Native BDD testing\n    Then YAKS rocks!\n"
          }
        }
      }]
    capabilities: Basic Install
    categories: Integration & Delivery
    certified: "false"
    containerImage: docker.io/apache/yaks:0.0.2
    createdAt: "2019-01-08T10:52:00Z"
    description: YAKS is a framework to help you test Apache Camel integrations running on Openshift & Kubernetes.
    repository: https://github.com/jboss-fuse/yaks
    support: Red Hat Fuse
  name: yaks.v0.0.2
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Test
      description: A YAKS test
      displayName: YAKS Test
      name: tests.org.citrusframework.yaks
      version: v1alpha1
      specDescriptors:
        - description: The test source
          displayName: Source
          path: source
        - description: The name of the test source
          displayName: Name
          path: source.name
        - description: The language of the test source
          displayName: Language
          path: source.language
        - description: The content of the test source
          displayName: Content
          path: source.content
      statusDescriptors:
        - description: The phase that the test is currently in
          displayName: Phase
          path: phase
        - description: The unique ID of the test
          displayName: Test ID
          path: testID
        - description: The version of YAKS which ran the test
          displayName: Version
          path: version
  description: |
    YAKS (Yet Another Kamel Subproject)
    ===================================

    YAKS is a platform to help you doing BDD testing on Openshift & Kubernetes.

    ## Running a YAKS test

    With the YAKS operator installed, you can run tests against deployed integrations by creating a `Test` resource.

    Tests are defined using [Gherkin](https://cucumber.io/docs/gherkin/) syntax. YAKS provides a set of custom steps which
    help to test for whether an integration is running, is producing some expected output and also whether an HTTP endpoint
    returns an expected response.

    The example below executes some dummy steps to check that Yaks has been installed correctly.

    ```
    apiVersion: org.citrusframework.yaks/v1alpha1
    kind: Test
    metadata:
      name: example
    spec:
      source:
        name: example.feature
        content: |-
          Feature: hello world

            Scenario: print slogan
              Given YAKS does Cloud-Native BDD testing
              Then YAKS rocks!
    ```

    Refer to the [Yaks repository](https://github.com/jboss-fuse/yaks) for more complex examples.

  displayName: Yaks Operator
  icon:
  - base64data: 
    mediatype: image/svg+xml
  install:
    spec:
      deployments:
      - name: yaks
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: yaks
          strategy: {}
          template:
            metadata:
              labels:
                name: yaks
            spec:
              containers:
              - command:
                - yaks
                - operator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: yaks
                image: docker.io/yaks/yaks:0.0.2
                imagePullPolicy: IfNotPresent
                name: yaks
                resources: {}
              serviceAccountName: yaks
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - endpoints
          - persistentvolumeclaims
          - configmaps
          - secrets
          - serviceaccounts
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - pods/log
          - pods/status
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - roles
          - rolebindings
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          - replicasets
          - statefulsets
          verbs:
          - create
          - delete
          - deletecollection
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - org.citrusframework.yaks
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: yaks
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
    - yaks
    - testing
    - microservices
  labels:
    name: yaks-operator
  links:
    - name: YAKS source code repository
      url: https://github.com/jboss-fuse/yaks
# TODO: To be confirmed...
#  maintainers:
#    - email:
#      name:
  maturity: alpha
  provider:
    name: Red Hat
  version: 0.0.2
